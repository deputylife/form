import logging
import openpyxl
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.utils import executor

# üî• –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
TOKEN = "TOKEN_BOT"
# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
EXCEL_FILE = "questions.xlsx"
# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
RESPONSES_FILE = "responses.xlsx"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (—á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –æ—à–∏–±–∫–∏)
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –•—Ä–∞–Ω–∏–º –≤–æ–ø—Ä–æ—Å—ã –∏ –∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç—ã
questions = []
options = {}

# –•—Ä–∞–Ω–∏–º –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_answers = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–ø—Ä–æ—Å–∞
start_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
start_keyboard.add(KeyboardButton("–ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å"))

# üü¢ –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=["start"])
async def start_survey(message: types.Message):
    user_id = message.from_user.id
    user_answers[user_id] = []  # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã
    await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç telegram-bot –¥–ª—è –æ–ø—Ä–æ—Å–∞. –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å'.", reply_markup=start_keyboard)

# üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å
@dp.message_handler(lambda message: message.text == "–ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å")
async def ask_question(message: types.Message):
    user_id = message.from_user.id
    user_answers[user_id] = []  # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ Excel
    load_questions_from_excel()
    
    await send_question(user_id, message)

# üìå –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞
async def send_question(user_id, message):
    current_question = len(user_answers[user_id])

    if current_question < len(questions):
        question_text = questions[current_question]
        question_type = options.get(question_text, {}).get("type", "text")

        # –ï—Å–ª–∏ –µ—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ ‚Üí –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        if question_type == "–í—ã–±–æ—Ä" or question_type == "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä":
            keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
            for option in options[question_text]["choices"]:
                keyboard.add(KeyboardButton(option))
            await message.answer(question_text, reply_markup=keyboard)
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await message.answer(question_text, reply_markup=ReplyKeyboardRemove())
    else:
        await message.answer("–°–ø–∞—Å–∏–±–æ!")
        save_to_excel(user_id)
        await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –ú–∏–Ω—Ü–∏—Ñ—Ä—ã –†–æ—Å—Å–∏–∏!", reply_markup=start_keyboard)
        await message.answer("–ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏: @deputylife")

# üìù –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤
@dp.message_handler()
async def handle_answer(message: types.Message):
    user_id = message.from_user.id
    current_question = len(user_answers[user_id])

    if current_question < len(questions):
        user_answers[user_id].append(message.text)
        await send_question(user_id, message)

# üì° –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ Excel
def load_questions_from_excel():
    global questions, options
    questions = []
    options = {}

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º Excel —Ñ–∞–π–ª —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
    wb = openpyxl.load_workbook(EXCEL_FILE)
    sheet = wb.active

    for row in sheet.iter_rows(min_row=2, values_only=True):
        question, question_type, option_str = row
        questions.append(question)
        
        if question_type == "–í—ã–±–æ—Ä" or question_type == "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä":
            options[question] = {
                "type": question_type,
                "choices": option_str.split(', ')  # –†–∞–∑–¥–µ–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
            }
        else:
            options[question] = {"type": question_type}

# üì° –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ –æ—Ç–≤–µ—Ç–æ–≤ –≤ –Ω–æ–≤—ã–π Excel —Ñ–∞–π–ª (responses.xlsx)
def save_to_excel(user_id):
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
    try:
        wb = openpyxl.load_workbook(RESPONSES_FILE)
        sheet = wb.active
    except FileNotFoundError:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        wb = openpyxl.Workbook()
        sheet = wb.active
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–∏–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫)
        sheet.append(questions)  # –ó–∞–≥–æ–ª–æ–≤–∫–∏ ‚Äî –≤–æ–ø—Ä–æ—Å—ã

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ Excel
    data = user_answers[user_id]
    
    # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â—É—é –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
    next_row = sheet.max_row + 1
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç –≤ —Å–≤–æ—é —è—á–µ–π–∫—É
    sheet.append(data)  # –û—Ç–≤–µ—Ç—ã –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ –æ–¥–Ω–æ–º—É –≤ –∫–∞–∂–¥—É—é —è—á–µ–π–∫—É

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    wb.save(RESPONSES_FILE)

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
